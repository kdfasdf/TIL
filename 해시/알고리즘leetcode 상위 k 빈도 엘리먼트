https://leetcode.com/problems/top-k-frequent-elements/
## 풀이
HashMap에 getOrDefault+1을 put하여 숫자를 키값으로 빈도수를 value 값으로 저장한 후 value 값 기준으로 정렬<br>
상위 k개의 key값들이 정답
- Java
```
import java.util.*;
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] answer = new int[k];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i:nums){
            map.put(i,map.getOrDefault(i,0)+1);
        }
        List<Integer> key = new ArrayList(map.keySet());
        key.sort((o1,o2)->map.get(o2).compareTo(map.get(o1)));
        int index=0;
        for(int a : key)
        {
            answer[index]=a;
            index+=1;
            if (index==k) break;
        }
        return answer;
    }
}
```
runtime: 상위 75%<br>
메모리: 상위 89%<br>

정렬을 사용해서 풀었으므로 시간 복잡도가 O(nlogn)정도로 예상된다. 런타임과 메모리에서 더 높은 점수를 받은 코드들의 공통점이 있었는데 전부 위에서 사용했던 HashMap과 그 외 빈도수를 인덱스 값으로 숫자를 value 값으로 하는 풀이였다
즉
```
{
  1=3,
2=2,
3=1,
4=1
}
```
을
```
3=[1],
2=[2],
1=[3,4]
```
와 같이 저장하여 상위 k 빈도 를 뽑는 것이다
- 개선된 풀이
```
import java.util.*;
class Solution{
    public int[] topKFrequent(int[] nums, int k){
        Map<Integer,Integer> frequencyMap = new HashMap<>();
        for(int n: nums)
            frequencyMap.put(n,frequencyMap.getOrDefault(n,0)+1);
        Map<Integer,List<Integer>> buckets = new HashMap<>();
        for(int elem:frequencyMap.keySet())
        {
            int frequency=frequencyMap.get(elem);
            List<Integer> elems = buckets.getOrDefault(frequency, new ArrayList<>());
            elems.add(elem);
            buckets.put(frequency,elems);
        }
        int[] answer = new int [k];
        int index=0;
        for(int frequency=nums.length;frequency>=0&&index<k;frequency--)
        {
            if(buckets.get(frequency)!=null)
            {
                for(int elem:buckets.get(frequency))
                {
                    answer[index]=elem;
                    index++;
                }
            }
        }
        return answer;
    }
}
```
runtime: 상위 10프로
메모리: 상위 44프로
